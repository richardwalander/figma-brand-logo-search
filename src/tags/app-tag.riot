<app-tag>
    <style>
    :root {
      position: relative;
    }

    .bar {
      position: absolute;
      bottom: 0;
      width: 100%;
      border-top: solid 1px #eee;
      text-align: right;
    }
    .input {
      text-align: center;
      position: relative;
    }
    .input input {
      width: 80%;
      border-radius: 40px;
    }
    .input input:focus {
      outline-color: rgba(255,255,255,0);
      outline-style: auto;
      outline-width: 0;
    }
    .clearbit {
      text-align: center;
      position: absolute;
      left: 0;
      right: 0;
      bottom: 20px;
      font-size: 12px;
    }
    .close {
      cursor: pointer;
      position: absolute;
      top: 50%;
      right: 12%;
      transform: translateY(-50%);
      background-color: #ccc;
      border-radius: 50%;
      padding: 2px;
    }
    .la-times {
      font-size: 20px;
    }
    .empty {
      text-align: center;
    }
    .empty p,
    .empty h3 {
      color: #999;
    }
    .icon {
      background-color: #eee;
      padding: 20px;
      border-radius: 50%;
      display: inline-block;
      margin-top: 20%;
    }
    .icon .la-search {
      font-size: 64px;
      color: #999;
    }
    </style>
    <div class="input">
      <input id="domain" onkeyup={search} placeholder="Search for brand domain (example.com)">
      <div if={$('#domain').value !== ''} class="close" onclick={clear}>
        <i class="las la-times"></i>
      </div>
    </div>
    <div if={state.result.length > 0} class="container">
      <list-item each="{ r in state.result}" key="{r.domain}" {...r} onclick={itemclick.bind(this,r)}></list-item>
    </div>
    <div if={state.result.length === 0} class="container empty">
      <div class="icon">
        <i class="las la-search"></i>
      </div>
      <h3>Search for logo</h3>
      <p>Type the domain to search for logos to use as fills on elements in your design.</p>
    </div>
    <a class="clearbit" target="_blank" href="https://clearbit.com">Logos provided by Clearbit</a>
    <!--div class="bar">
      <button class="small" id="cancel" onclick={cancel}>Cancel</button>
      <button class="small primary" id="generate" onclick={generate}>Generate Logo</button>
    </div-->

    <script>
      import ListItem from './list-item.riot'

      export default {
        result: [],
        components: {
          ListItem
        },
        onBeforeMount(props, state) {
          state.result = []
        },
        onMounted() {
          this.$('#domain').focus()
        },
        clear() {
          this.$('#domain').value = ''
          this.update({
            result: []
          })
          this.$('#domain').focus()
        },
        search(e) {
          let val = e.target.value
          if (val !== '') {
            let req = new XMLHttpRequest()
            req.open("GET", `https://autocomplete.clearbit.com/v1/companies/suggest?query=${val}`, true)
            // req.responseType = "text";

            req.onload = (ev) => {
              let text = req.responseText // Note: not req.responseText
              let json = JSON.parse(text)
              this.update({
                result: json
              });
            };

            req.send(null)
          } else {
            this.update({
              result: []
            })
          }
        },
        generate() {
          let domain = this.$('#domain').value
          // debugger
          if (domain !== '') {
            let req = new XMLHttpRequest();
            req.open("GET", `https://logo.clearbit.com/${domain}`, true)
            req.responseType = "arraybuffer"

            req.onreadystatechange = () => {
                if (req.readyState === 4){   //if complete
                    if(req.status === 200){  //check if "OK" (200)
                      let arrayBuffer = req.response
                      if (arrayBuffer) {
                        let imageArray = new Uint8Array(arrayBuffer)
                        parent.postMessage({ pluginMessage: { type: 'create-logo', imageArray } }, '*')
                      }
                    } else {
                      parent.postMessage({ pluginMessage: {type: 'error'}}, '*')
                    }
                } 
            }

            req.send(null)
          }
        },
        cancel() {
          parent.postMessage({ pluginMessage: { type: 'cancel' } }, '*')
        },
        itemclick(e) {
          this.$('#domain').value = e.domain
          this.generate()
        }
      }
    </script>
  </app-tag>